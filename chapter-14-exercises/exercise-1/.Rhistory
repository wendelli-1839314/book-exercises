install.packages("httr")
library("httr")
install.packages("jsonlite")
library("httr")
library("jsonlite")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
response <- GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
body <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
repos <- fromJSON(body)
View(repos)
repos %>%
filter(private != "FALSE") %>%
summarize(
count = n()
)
print(repos)
repos %>%
filter(private != "FALSE") %>%
summarize(
count = n()
)
print(count)
repos %>%
filter(private != "FALSE") %>%
summarize(
count = n()
)
repos %>%
filter(private == "FALSE") %>%
summarize(
count = n()
)
print(count)
library("dplyr")
repos %>%
filter(private == "FALSE") %>%
summarize(
count = n()
)
print(count)
repos %>%
filter(private == "FALSE") %>%
summarize(
count = n()
)
repos %>%
filter(private == "FALSE") %>%
summarize(
count = n()
) %>%
pull(count)
query_params <- list(q = "informatics")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET("https://www.google.com/search", query = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
print(paste0(base_uri, search_endpoint))
search_endpoint <- "/search/repositories?q="
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "informatics")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "informatics")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
search_response <- GET(paste0(base_uri, search_endpoint), query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
search_repos <- fromJSON(content(search_response, "text"))
View(search_repos)
#View(search_repos)
print(search_repos)
